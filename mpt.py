import banner, requests
from bs4 import BeautifulSoup

class HackerTargetAPI():
    def __init__(self):
        pass#self.arg = arg

    def mtr(self):
        target = input("Target IP/Domain: ")
        r = requests.get(f"https://api.hackertarget.com/mtr/?q={target}")
        soup = BeautifulSoup(r.text, 'lxml')
        funcion = soup.find_all('body')
        print(funcion[0].text)

    def nping(self):
        target = input("Target IP/Domain: ")
        r = requests.get(f"https://api.hackertarget.com/nping/?q={target}")
        soup = BeautifulSoup(r.text, 'lxml')
        funcion = soup.find_all('body')
        print(funcion[0].text)

    def dnslookup(self):
        target = input("Target IP/Domain: ")
        r = requests.get(f"https://api.hackertarget.com/dnslookup/?q={target}")
        soup = BeautifulSoup(r.text, 'lxml')
        funcion = soup.find_all('body')
        print(funcion[0].text)

    def reversedns(self):
        target = input("Target IP/Domain: ")
        r = requests.get(f"https://api.hackertarget.com/reversedns/?q={target}")
        soup = BeautifulSoup(r.text, 'lxml')
        funcion = soup.find_all('body')
        print(funcion[0].text)

    def hostsearch(self):
        target = input("Target IP/Domain: ")
        r = requests.get(f"https://api.hackertarget.com/hostsearch/?q={target}")
        soup = BeautifulSoup(r.text, 'lxml')
        funcion = soup.find_all('body')
        print(funcion[0].text)

    def findshareddns(self):
        target = input("Target IP/Domain: ")
        r = requests.get(f"https://api.hackertarget.com/findshareddns/?q={target}")
        soup = BeautifulSoup(r.text, 'lxml')
        funcion = soup.find_all('body')
        print(funcion[0].text)

    def zonetransfer(self):
        target = input("Target IP/Domain: ")
        r = requests.get(f"https://api.hackertarget.com/zonetransfer/?q={target}")
        soup = BeautifulSoup(r.text, 'lxml')
        funcion = soup.find_all('body')
        print(funcion[0].text)

    def whois(self):
        target = input("Target IP/Domain: ")
        r = requests.get(f"https://api.hackertarget.com/whois/?q={target}")
        soup = BeautifulSoup(r.text, 'lxml')
        funcion = soup.find_all('body')
        print(funcion[0].text)

    def reverseiplookup(self):
        target = input("Target IP/Domain: ")
        r = requests.get(f"https://api.hackertarget.com/reverseiplookup/?q={target}")
        soup = BeautifulSoup(r.text, 'lxml')
        funcion = soup.find_all('body')
        print(funcion[0].text)

    def nmap(self):
        target = input("Target IP/Domain: ")
        r = requests.get(f"https://api.hackertarget.com/nmap/?q={target}")
        soup = BeautifulSoup(r.text, 'lxml')
        funcion = soup.find_all('body')
        print(funcion[0].text)

    def subnetcalc(self):
        target = input("Target IP/Domain: ")
        r = requests.get(f"https://api.hackertarget.com/subnetcalc/?q={target}")
        soup = BeautifulSoup(r.text, 'lxml')
        funcion = soup.find_all('body')
        print(funcion[0].text)

    def httpheaders(self):
        target = input("Target IP/Domain: ")
        r = requests.get(f"https://api.hackertarget.com/httpheaders/?q={target}")
        soup = BeautifulSoup(r.text, 'lxml')
        funcion = soup.find_all('body')
        print(funcion[0].text)

    def pagelinks(self):
        target = input("Target IP/Domain: ")
        r = requests.get(f"https://api.hackertarget.com/pagelinks/?q={target}")
        soup = BeautifulSoup(r.text, 'lxml')
        funcion = soup.find_all('body')
        print(funcion[0].text)


if __name__ == '__main__':
    c = HackerTargetAPI()
    banner.banner()
    elegir = input(">> ")
    if elegir == "1":
        c.mtr()

    if elegir == "2":
        c.nping()

    if elegir == "3":
        c.dnslookup()

    if elegir == "4":
        c.reversedns()

    if elegir == "5":
        c.hostsearch()

    if elegir == "6":
        c.findshareddns()

    if elegir == "7":
        c.zonetransfer()

    if elegir == "8":
        c.whois()

    if elegir == "9":
        c.geoip()

    if elegir == "10":
        c.reverseiplookup()

    if elegir == "11":
        c.nmap()

    if elegir == "12":
        c.subnetcalc()

    if elegir == "13":
        c.httpheaders()

    if elegir == "14":
        c.pagelinks()
